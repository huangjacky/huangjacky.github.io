<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HuangJacky技术分享</title>
    <link>http://huangjacky.github.io/</link>
    <description>Recent content on HuangJacky技术分享</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 Feb 2016 20:36:09 +0800</lastBuildDate>
    <atom:link href="http://huangjacky.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>PHP安全开发规范</title>
      <link>http://huangjacky.github.io/post/docs-php-secure-coding/</link>
      <pubDate>Sat, 13 Feb 2016 20:36:09 +0800</pubDate>
      
      <guid>http://huangjacky.github.io/post/docs-php-secure-coding/</guid>
      <description>

&lt;h2 id=&#34;0x1-编写目的:bde8b6622ae197dc427e7081335654b0&#34;&gt;0x1 编写目的&lt;/h2&gt;

&lt;p&gt;本文主要针对PHP开发者，结合PHP语言的一些特性，在开发过程可能出现安全问题的地方和一些常见修复建议或者安全策略。&lt;/p&gt;

&lt;h2 id=&#34;0x2-php语言特性:bde8b6622ae197dc427e7081335654b0&#34;&gt;0x2 PHP语言特性&lt;/h2&gt;

&lt;p&gt;PHP是目前市面上最流行的服务端编程语言，被用于各种网站后台开发。作为一款开源软件，它拥有庞大的开源社区，丰富的优秀三方库和框架，为开发者提供极大的便利。因此讲述PHP安全开发规范的时候，我们需要考虑以上三个方面：编程语言本身，框架，库。&lt;br /&gt;
PHP的变量是&lt;strong&gt;弱类型&lt;/strong&gt;，变量的类型会根据数据自动变化。这个特性会导致一些开发者不易察觉的错误或者插入一些无法预期的数据。&lt;/p&gt;

&lt;h2 id=&#34;0x3-常见漏洞:bde8b6622ae197dc427e7081335654b0&#34;&gt;0x3 常见漏洞&lt;/h2&gt;

&lt;h2 id=&#34;0x4-安全建议:bde8b6622ae197dc427e7081335654b0&#34;&gt;0x4 安全建议&lt;/h2&gt;

&lt;h2 id=&#34;0x5-参考:bde8b6622ae197dc427e7081335654b0&#34;&gt;0x5 参考&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>安全开发规范概要</title>
      <link>http://huangjacky.github.io/post/general/</link>
      <pubDate>Sat, 13 Feb 2016 18:14:49 +0800</pubDate>
      
      <guid>http://huangjacky.github.io/post/general/</guid>
      <description>

&lt;h2 id=&#34;0x1-编写目的:af64df5535833d56354a810c9b55c190&#34;&gt;0x1 编写目的&lt;/h2&gt;

&lt;p&gt;本文主要阐述开发过程中需要注意的安全原则，和编程语言没有关系，本文并不会对相关原则展开进行详讲解。后续将会在具体的编程语言安全开发规范中做进一步，更详细的描述。&lt;/p&gt;

&lt;h2 id=&#34;0x2-十大安全编程原则:af64df5535833d56354a810c9b55c190&#34;&gt;0x2 十大安全编程原则&lt;/h2&gt;

&lt;h3 id=&#34;1-输入验证:af64df5535833d56354a810c9b55c190&#34;&gt;1. 输入验证&lt;/h3&gt;

&lt;p&gt;所有从不可控输入源传递的数据都需要进行安全验证，有效的安全验证可以避免绝大多数的安全漏洞。&lt;/p&gt;

&lt;h3 id=&#34;2-警示编译器警告:af64df5535833d56354a810c9b55c190&#34;&gt;2. 警示编译器警告&lt;/h3&gt;

&lt;p&gt;警告可能不会影响程序的编译，但是却会留下安全隐患和不确定的因素。一些非编译语言也需要相关linter来检测编码是否符合开发规范。因此在开发的过程中，需要使用静态源码分析工具来不断提高代码的质量。&lt;/p&gt;

&lt;h3 id=&#34;3-针对安全策略的架构和设计:af64df5535833d56354a810c9b55c190&#34;&gt;3. 针对安全策略的架构和设计&lt;/h3&gt;

&lt;p&gt;安全越早接入到开发过程中，会使得防御工作更轻松，系统更可靠，更不容易被攻击。&lt;br /&gt;
在开发周期的早期就确定并文档记录系统安全需求，确保后续的开发都符合安全需求并能通过安全评估。&lt;/p&gt;

&lt;h3 id=&#34;4-保持简单性:af64df5535833d56354a810c9b55c190&#34;&gt;4. 保持简单性&lt;/h3&gt;

&lt;p&gt;功能设计的时候，模块越小，逻辑越清晰，能够有效减少犯错的可能性。&lt;/p&gt;

&lt;h3 id=&#34;5-默认拒绝:af64df5535833d56354a810c9b55c190&#34;&gt;5. 默认拒绝&lt;/h3&gt;

&lt;p&gt;所有的访问策略默认都是拒绝的，除非有相应的权限名单。这就表明必须使用白名单的形式。&lt;/p&gt;

&lt;h3 id=&#34;6-最小权限原则:af64df5535833d56354a810c9b55c190&#34;&gt;6. 最小权限原则&lt;/h3&gt;

&lt;p&gt;每个角色只能拥有完成任务的最小权限，而且任务完成后要在最短的时间内回收权限。&lt;/p&gt;

&lt;h3 id=&#34;7-清理输出的数据:af64df5535833d56354a810c9b55c190&#34;&gt;7. 清理输出的数据&lt;/h3&gt;

&lt;p&gt;所有从自己系统或者模块发送出去要经过安全过滤保证对其他系统无害。&lt;/p&gt;

&lt;h3 id=&#34;8-纵深防御原则:af64df5535833d56354a810c9b55c190&#34;&gt;8. 纵深防御原则&lt;/h3&gt;

&lt;p&gt;从多个维度或者多个策略同时进行防御，防止攻击源绕过单一的安全策略。&lt;/p&gt;

&lt;h3 id=&#34;9-使用有效的质量保证技术:af64df5535833d56354a810c9b55c190&#34;&gt;9. 使用有效的质量保证技术&lt;/h3&gt;

&lt;p&gt;在开发和测试的各个阶段都需要进行源码审计，fuzz，渗透测试等测试方法来保证代码的质量和功能。&lt;br /&gt;
使用威胁模型来预测软件是否收到威胁。威胁模型包括：识别关键资产，分解应用，识别和分类每项资产或者组件受到的威胁，并基于风险评级排名，然后制定设计方案和代码实现时的防御策略以及实现后的测试用例。&lt;/p&gt;

&lt;h3 id=&#34;10-统一安全编码规范:af64df5535833d56354a810c9b55c190&#34;&gt;10. 统一安全编码规范&lt;/h3&gt;

&lt;p&gt;为开发语言和平台制订安全编码规范，并实施，这样可以减少开发和维护成本，同时能够快速定位缺陷代码。&lt;/p&gt;

&lt;h2 id=&#34;0x3:af64df5535833d56354a810c9b55c190&#34;&gt;0x3&lt;/h2&gt;

&lt;p&gt;编程语言安全开发规范列表&lt;br /&gt;
暂无&lt;/p&gt;

&lt;h2 id=&#34;0x4-参考索引:af64df5535833d56354a810c9b55c190&#34;&gt;0x4 参考索引&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[1] &lt;a href=&#34;https://securecoding.cert.org/confluence/display/seccode/Top+10+Secure+Coding+Practices&#34;&gt;cert安全编码规范英文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2] &lt;a href=&#34;http://staff.ustc.edu.cn/~sycheng/sst/lectures/ch08_Secure_Programming.pdf&#34;&gt;中科大安全编程ppt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[3] &lt;a href=&#34;https://www.owasp.org/images/7/73/OWASP_SCP_Quick_Reference_Guide_(Chinese).pdf&#34; title=&#34;OWASP_SCP_Quick_Reference_Guide&#34;&gt;OWASP安全编码规范快速参考指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>HuangJacky的个人求职简历</title>
      <link>http://huangjacky.github.io/resume/</link>
      <pubDate>Sat, 13 Feb 2016 17:42:37 +0800</pubDate>
      
      <guid>http://huangjacky.github.io/resume/</guid>
      <description></description>
    </item>
    
    <item>
      <title>如何在Python中正确的使用BloomFilter</title>
      <link>http://huangjacky.github.io/post/python-bloom-filter/</link>
      <pubDate>Sat, 13 Feb 2016 14:01:35 +0800</pubDate>
      
      <guid>http://huangjacky.github.io/post/python-bloom-filter/</guid>
      <description>

&lt;h2 id=&#34;0x1-什么是布隆过滤器-bloomfilter:09e618735b296f7c44dd000a774e255f&#34;&gt;0x1 什么是布隆过滤器(BloomFilter)&lt;/h2&gt;

&lt;p&gt;1970年，由布隆提出来的一个用于判断元素是否在集合中的高效的算法，集合中的元素可以增加，但是要删除一个元素比较困难，同时还有少量的误报率。&lt;br /&gt;
在数据量比较小的时候，我们可以使用Hash来判断元素是否命中，但是当元素增加起来后，Hash算法需要的空间就会急速增长，查找时间也会增加。布隆过滤器主要用在样本集合量大但是很少有删除元素，不要求100%正确率的场景下。主要有：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;缓存&lt;/li&gt;
&lt;li&gt;计数&lt;/li&gt;
&lt;li&gt;分散聚合&lt;/li&gt;
&lt;li&gt;数据同步&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;算法细节可以查看相关的文档，或者英文的维基中也有详细的介绍。&lt;/p&gt;

&lt;h2 id=&#34;0x2-python中的布隆过滤器:09e618735b296f7c44dd000a774e255f&#34;&gt;0x2 Python中的布隆过滤器&lt;/h2&gt;

&lt;p&gt;Python中有多个实现BloomFilter的包详情可以自己搜索Pypi，本文中主要介绍PyBloom，可以通过pip进行安装。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install pybloom
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;读者也可以去作者的github上直接下载&lt;a href=&#34;https://github.com/jaybaird/python-bloomfilter/&#34;&gt;源码&lt;/a&gt;进行编译安装&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python setup.py install
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;0x3-使用pybloom:09e618735b296f7c44dd000a774e255f&#34;&gt;0x3 使用PyBloom&lt;/h2&gt;

&lt;p&gt;python-bloomfilter中有两个类&lt;strong&gt;BloomFilter&lt;/strong&gt;和&lt;strong&gt;ScalableBloomFilter&lt;/strong&gt;&lt;br /&gt;
主要的用法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pybloom import BloomFilter, ScalableBloomFilter
bf = BloomFilter(capacity=10000, error_rate=0.001)
bf.add(&#39;test&#39;)
print &#39;test&#39; in bf
sbf = ScalableBloomFilter(mode=ScalableBloomFilter.SMALL_SET_GROWTH)
sbf.add(&#39;dddd&#39;)
print &#39;ddd&#39; in sbf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BloomFilter是一个定容的过滤器，&lt;strong&gt;error_rate&lt;/strong&gt;是指最大的误报率是0.1%，而ScalableBloomFilter是一个不定容量的布隆过滤器，它可以不断添加元素。&lt;strong&gt;add&lt;/strong&gt;方法是添加元素，如果元素已经在布隆过滤器中，就返回true，如果不在返回fasle并将该元素添加到过滤器中。判断一个元素是否在过滤器中，只需要使用&lt;strong&gt;in&lt;/strong&gt;运算符即可了。&lt;br /&gt;
简单易用的一个Python库，希望对大家有帮助。&lt;/p&gt;

&lt;h2 id=&#34;0x4-参考:09e618735b296f7c44dd000a774e255f&#34;&gt;0x4 参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[1] &lt;a href=&#34;https://en.wikipedia.org/wiki/Bloom_filter&#34;&gt;Bloom_Filter Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2] &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8&#34;&gt;布隆过滤器 维基&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[3] &lt;a href=&#34;https://github.com/jaybaird/python-bloomfilter/&#34;&gt;python-bloomfilter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://huangjacky.github.io/post/hello/</link>
      <pubDate>Wed, 10 Feb 2016 18:14:49 +0800</pubDate>
      
      <guid>http://huangjacky.github.io/post/hello/</guid>
      <description>

&lt;h1 id=&#34;this-is-my-post:8a07c3dae13f18d0c06cf5f9e482b173&#34;&gt;This is my post.&lt;/h1&gt;

&lt;h2 id=&#34;测试:8a07c3dae13f18d0c06cf5f9e482b173&#34;&gt;测试&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;System.out.println(&amp;quot;hello&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>