<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial on HuangJacky技术分享</title>
    <link>http://huangjacky.github.io/categories/tutorial/</link>
    <description>Recent content in Tutorial on HuangJacky技术分享</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 Feb 2016 13:31:43 +0800</lastBuildDate>
    <atom:link href="http://huangjacky.github.io/categories/tutorial/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>expect脚本入门</title>
      <link>http://huangjacky.github.io/post/expect-usage/</link>
      <pubDate>Sun, 14 Feb 2016 13:31:43 +0800</pubDate>
      
      <guid>http://huangjacky.github.io/post/expect-usage/</guid>
      <description>

&lt;h2 id=&#34;0x1-什么是expect:1f8f1ad3647c9c17632c3f1db7ef7962&#34;&gt;0x1 什么是expect&lt;/h2&gt;

&lt;p&gt;有时候我们需要自动完成一系列的名单，但是这些命令需要交互，比如SSH，需要人工输入密码，这个时候我们可以写一个expect脚本来完成这些任务。&lt;br /&gt;
expect被运用在大多数的运维脚本上，当然很多编程语言里面也提供相应的封装库，比如Python中的&lt;a href=&#34;https://pypi.python.org/pypi/pexpect/4.0.1&#34; title=&#34;Python pexpect&#34;&gt;pexpect&lt;/a&gt;，PHP中的expect://伪协议以及&lt;a href=&#34;http://php.net/manual/zh/function.expect-expectl.php&#34; title=&#34;PHP expect-expectl&#34;&gt;expect_expectl函数&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;0x2-expect脚本入门讲解:1f8f1ad3647c9c17632c3f1db7ef7962&#34;&gt;0x2 expect脚本入门讲解&lt;/h2&gt;

&lt;p&gt;一个expect脚本可以有两种形式，第一种直接使用expect解析。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/usr/bin/expect
# code here
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;另一种是使用expect -c 来直接执行expect的字符串命令&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/bash
/usr/bin/expect -c &amp;quot;code here&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这两种形式，各位看官老爷自己选择吧。&lt;/p&gt;

&lt;h2 id=&#34;0x3-expect重要的命令讲解:1f8f1ad3647c9c17632c3f1db7ef7962&#34;&gt;0x3 expect重要的命令讲解&lt;/h2&gt;

&lt;h3 id=&#34;输出回显:1f8f1ad3647c9c17632c3f1db7ef7962&#34;&gt;输出回显&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;send &amp;quot;abc\n&amp;quot;
send_user &amp;quot;dddd\n&amp;quot;
puts stdout|stderr &amp;quot;ererer\n&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;目前主要使用如上三个命令。&lt;/p&gt;

&lt;h3 id=&#34;执行命令:1f8f1ad3647c9c17632c3f1db7ef7962&#34;&gt;执行命令&lt;/h3&gt;

&lt;p&gt;一些常见的命令比如cd(切换工作目录)，可以直接执行，其他的命令需要使用exec来运行&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd public
exec /usr/local/bin/git add -A
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里需要注意的地方就是最好带上命令的完整路径。&lt;/p&gt;

&lt;h3 id=&#34;执行需要交互的命令:1f8f1ad3647c9c17632c3f1db7ef7962&#34;&gt;执行需要交互的命令&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;spawn /usr/local/bin/git push
expect {
  &amp;quot;Username&amp;quot; {send &amp;quot;huangjacky\n&amp;quot;; exp_continue;}
  &amp;quot;*assword&amp;quot; {send &amp;quot;test\n&amp;quot;}
}
expect &amp;quot;in \d+ ms&amp;quot;
send &amp;quot;ok\n&amp;quot;
expect eof
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面例子中使用&lt;strong&gt;spawn&lt;/strong&gt;来执行需要交互的命名。使用&lt;strong&gt;expect&lt;/strong&gt;来匹配命令执行后的回显，参数可以是一个字符串，也可以在里面使用通配符，还可以是一个正则。输入数据和命令使用&lt;strong&gt;send&lt;/strong&gt;，其中使用\n来表示回车键。&lt;br /&gt;
当需要判断多个输出的时候使用{}括起来，expect和{}中间有个空格一定不能少，正常情况来说{}里面所有匹配条件只有一个能够被执行，如果需要循环执行，使用&lt;strong&gt;exp_continue&lt;/strong&gt;来再次进入本次匹配。&lt;br /&gt;
使用&lt;strong&gt;expect eof&lt;/strong&gt;来判断进程是否执行完毕。&lt;/p&gt;

&lt;h3 id=&#34;变量赋值和参数获取:1f8f1ad3647c9c17632c3f1db7ef7962&#34;&gt;变量赋值和参数获取&lt;/h3&gt;

&lt;p&gt;expect中一些内置变量&lt;strong&gt;$argv&lt;/strong&gt;是参数数组，0是第一个参数，文件本身不在这个数组中，而单独的变量&lt;strong&gt;$argv0&lt;/strong&gt;才是是文件本身的路径，&lt;strong&gt;$argc&lt;/strong&gt;是参数的数量，&lt;strong&gt;timeout&lt;/strong&gt;是spawn执行命令超时设置，单位秒，0是不超时，一致等待到expect匹配成功。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;set timeout 30
set name [lindex $argv 0]
set cdir [exec pwd]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;判断条件:1f8f1ad3647c9c17632c3f1db7ef7962&#34;&gt;判断条件&lt;/h3&gt;

&lt;p&gt;expect中的判断条件使用{}括起来，执行语句也使用{}括起来。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;if {$argc!=0} {
  puts stderr &amp;quot;Usage: $argv0 msg\n&amp;quot;
  exit
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;条件的{}和执行语句{}之间必须有一个空间，判断条件的左值和右值以及逻辑运算符之间不能有空格。&lt;br /&gt;
大致语法和shell脚本差不多。&lt;/p&gt;

&lt;h2 id=&#34;0x4-参考:1f8f1ad3647c9c17632c3f1db7ef7962&#34;&gt;0x4 参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[1] &lt;a href=&#34;http://linux.die.net/man/1/expect&#34; title=&#34;expect手册&#34;&gt;expect手册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2] &lt;a href=&#34;http://dongweiming.github.io/blog/archives/%E5%85%B3%E4%BA%8Eexpect%E7%A0%94%E7%A9%B6%EF%BC%88%E4%BA%8C%EF%BC%89/&#34; title=&#34;expect研究&#34;&gt;expect研究二&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>