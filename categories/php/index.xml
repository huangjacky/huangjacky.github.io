<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php on HuangJacky技术分享</title>
    <link>%27http:/huangjacky.github.io%27/categories/php/</link>
    <description>Recent content in Php on HuangJacky技术分享</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 Feb 2016 20:36:09 +0800</lastBuildDate>
    <atom:link href="#ZgotmplZ" rel="self" type="application/rss+xml" />
    
    <item>
      <title>PHP安全开发规范</title>
      <link>/%27http:/huangjacky.github.io%27/post/docs-php-secure-coding/</link>
      <pubDate>Sat, 13 Feb 2016 20:36:09 +0800</pubDate>
      
      <guid>/%27http:/huangjacky.github.io%27/post/docs-php-secure-coding/</guid>
      <description>

&lt;h2 id=&#34;0x1-编写目的:bde8b6622ae197dc427e7081335654b0&#34;&gt;0x1 编写目的&lt;/h2&gt;

&lt;p&gt;本文主要针对PHP开发者，结合PHP语言的一些特性，在开发过程可能出现安全问题的地方和一些常见修复建议或者安全策略。&lt;/p&gt;

&lt;h2 id=&#34;0x2-php语言特性:bde8b6622ae197dc427e7081335654b0&#34;&gt;0x2 PHP语言特性&lt;/h2&gt;

&lt;p&gt;PHP是目前市面上最流行的服务端编程语言，被用于各种网站后台开发。作为一款开源软件，它拥有庞大的开源社区，丰富的优秀三方库和框架，为开发者提供极大的便利。因此讲述PHP安全开发规范的时候，我们需要考虑以上三个方面：编程语言本身，框架，库。&lt;br /&gt;
PHP的变量是&lt;strong&gt;弱类型&lt;/strong&gt;，变量的类型会根据数据自动变化。这个特性会导致一些开发者不易察觉的错误或者插入一些无法预期的数据。
PHP对于异常的处理也比较奇妙，当有错误发生的时候，程序一般会打印异常，但是程序的流程并不会中断，那么程序的运行结果也是无法预估。有如下代码，判断用户是否在黑名单中：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;$db_link = mysqli_connect(&#39;localhost&#39;, &#39;dbuser&#39;, &#39;dbpassword&#39;, &#39;dbname&#39;);
function can_access_feature($current_user) {
       global $db_link;
       $username = mysqli_real_escape_string($db_link, $current_user-&amp;gt;username);
       $res = mysqli_query($db_link, &amp;quot;SELECT COUNT(id) FROM blacklisted_users WHERE username = &#39;$username&#39;;&amp;quot;);
       $row = mysqli_fetch_array($res);
       if ((int)$row[0] &amp;gt; 0) {
           return false;
       } else {
           return true;
       }
   }
  if (!can_access_feature($current_user)) {
          exit();
  }
  //其他的逻辑    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果密码错误，数据库连接就会失败，&lt;strong&gt;$db_link&lt;/strong&gt;就是null，但是程序还会继续运行，那么&lt;strong&gt;$row&lt;/strong&gt;也会是null，因此&lt;strong&gt;(int)$row[0]&lt;/strong&gt;同样是null，也就等于0，函数根本就没有查询数据库中的黑名单就将访问权限开放给任意用户了，业务逻辑完全被绕过。
PHP的一些内置函数，看上去有过滤，但是实际上对于安全没有任何帮助，例如：&lt;strong&gt;addslashes&lt;/strong&gt;, &lt;strong&gt;mysql_escape_string&lt;/strong&gt;,&lt;strong&gt;mysql_real_escape_string&lt;/strong&gt;，这类函数基本上都容易被绕过，也是PHP将要淘汰的函数。&lt;/p&gt;

&lt;h2 id=&#34;0x3-常见漏洞:bde8b6622ae197dc427e7081335654b0&#34;&gt;0x3 常见漏洞&lt;/h2&gt;

&lt;h3 id=&#34;0x3-1-xss跨站脚本:bde8b6622ae197dc427e7081335654b0&#34;&gt;0x3.1 XSS跨站脚本&lt;/h3&gt;

&lt;h3 id=&#34;0x3-2-injection注入攻击:bde8b6622ae197dc427e7081335654b0&#34;&gt;0x3.2 Injection注入攻击&lt;/h3&gt;

&lt;h3 id=&#34;0x3-3-include文件包含:bde8b6622ae197dc427e7081335654b0&#34;&gt;0x3.3 Include文件包含&lt;/h3&gt;

&lt;h3 id=&#34;0x3-4:bde8b6622ae197dc427e7081335654b0&#34;&gt;0x3.4&lt;/h3&gt;

&lt;h2 id=&#34;0x4-安全建议:bde8b6622ae197dc427e7081335654b0&#34;&gt;0x4 安全建议&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;理解功能需求，规划接口和参数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;开发人员在编写代码之前要理解功能需求，知道要完成功能是什么，将功能划分成CGI接口，然后整理CGI需要的参数，形成一个参数列表，然后列出各个参数的约束条件。   比如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;接口setUsername
参数列表：
$id int
$name &#39;/^[a-z0-9]+$/i&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的例子表明接口&lt;strong&gt;setUsername&lt;/strong&gt;需要两个参数，其中&lt;strong&gt;$id&lt;/strong&gt;的约束条件是必须为整数，&lt;strong&gt;$name&lt;/strong&gt;的约束条件是只能是数字和英文字符，经过这样校验的参数不管用于页面输出，还是存入数据库都不会对系统造成损害。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;统一入口，进行安全检测，以防遗漏&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;目前多数的框架都是用统一入口，由index.php进行路由转发，其他php文件均无法直接访问。借助这个思想，我们可以将上述的安全检测放置在统一入口的路由转发之前，当参数无法满足参数列表中的要求，程序流程直接结束。&lt;br /&gt;
同时程序可以将参数-约束条件列表独立成配置文件，这样以后增加参数或者修改约束条件都不需要在修改源码，将安全检测和业务逻辑完全分开，并且可以配置。&lt;br /&gt;
具体的检测逻辑的代码可以参考开源项目&lt;a href=&#34;http://git.oschina.net/huangjacky/Security-CI/blob/master/system/helpers/check_helper.php&#34; title=&#34;Security-CI示例代码&#34;&gt;Security-CI&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;0x5-参考:bde8b6622ae197dc427e7081335654b0&#34;&gt;0x5 参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[1] &lt;a href=&#34;https://www.owasp.org/index.php/PHP_Security_Cheat_Sheet&#34; title=&#34;OWASP PHP安全手册&#34;&gt;OWASP PHP安全手册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>