<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>机器学习 on HuangJacky技术分享</title>
    <link>http://huangjacky.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</link>
    <description>Recent content in 机器学习 on HuangJacky技术分享</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 Feb 2016 20:15:16 +0800</lastBuildDate>
    <atom:link href="http://huangjacky.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>我的Python机器学习笔记.1</title>
      <link>http://huangjacky.github.io/post/python-machinelearn1/</link>
      <pubDate>Sun, 14 Feb 2016 20:15:16 +0800</pubDate>
      
      <guid>http://huangjacky.github.io/post/python-machinelearn1/</guid>
      <description>

&lt;h2 id=&#34;0x1-机器学习的分类:439a07facb543f750f6ac56cbaeeb58f&#34;&gt;0x1 机器学习的分类&lt;/h2&gt;

&lt;p&gt;机器学习主要分成：
1. 监督学习 supervised learning
2. 无监督学习 unsupervised learning
3. 强化学习 enforcement learning&lt;/p&gt;

&lt;h3 id=&#34;机器学习的算法和用途:439a07facb543f750f6ac56cbaeeb58f&#34;&gt;机器学习的算法和用途&lt;/h3&gt;

&lt;h4 id=&#34;监督学习:439a07facb543f750f6ac56cbaeeb58f&#34;&gt;监督学习：&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;k-邻近算法  线性回归&lt;/li&gt;
&lt;li&gt;朴素贝叶斯算法  局部加权线性回归&lt;/li&gt;
&lt;li&gt;支持向量机  ridge回归&lt;/li&gt;
&lt;li&gt;决策树  lasso最小回归系数估计&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;无监督学习:439a07facb543f750f6ac56cbaeeb58f&#34;&gt;无监督学习：&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;k-均值  最大期望算法&lt;/li&gt;
&lt;li&gt;DBSCAN  parzen窗设计&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;如何选择合适的算法:439a07facb543f750f6ac56cbaeeb58f&#34;&gt;如何选择合适的算法&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;考虑机器学习算法的目的&lt;/li&gt;
&lt;li&gt;确定目标变量的类型，离散型选择分类，连续值选择线性回归&lt;/li&gt;
&lt;li&gt;考虑数据问题，已知样本是否充足等&lt;/li&gt;
&lt;li&gt;没有最好的算法，因此在运行过程中，要运行不同算法来评估学习模型&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;机器学习应用程序的步骤:439a07facb543f750f6ac56cbaeeb58f&#34;&gt;机器学习应用程序的步骤&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;收集数据&lt;br /&gt;
必要时为了节约时间可以直接使用公开的已有数据。&lt;/li&gt;
&lt;li&gt;输入数据&lt;br /&gt;
数据的格式要满足算法的需要，因此有时候需要转换格式。&lt;/li&gt;
&lt;li&gt;分析数据&lt;br /&gt;
人工分析数据有无异常，同时可以采用一维，二维和三维的图形来直观观察。&lt;/li&gt;
&lt;li&gt;训练算法&lt;br /&gt;
将格式化的数据通过学习算法来提取知识或信息，并存储，以便后续步骤使用。无监督学习不需要这一步。&lt;/li&gt;
&lt;li&gt;测试算法&lt;br /&gt;
使用测试数据样本来评估算法实际能力，如果不满意，分析原因要么重新选择算法，要么重新收集数据。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用算法&lt;br /&gt;
将机器学习算法转换成应用程序，投入到实际任务中，如果实际中还有问题数据，需要重复以上步骤。&lt;/p&gt;

&lt;h2 id=&#34;0x2-python机器学习相关库:439a07facb543f750f6ac56cbaeeb58f&#34;&gt;0x2 Python机器学习相关库&lt;/h2&gt;

&lt;h3 id=&#34;安装:439a07facb543f750f6ac56cbaeeb58f&#34;&gt;安装&lt;/h3&gt;

&lt;p&gt;有网络的情况下，安装这些库都是非常简单的事。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip install numpy scipy matplotlib pandas scikit-learn
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;numpy&lt;/strong&gt;中又数组array和矩阵matrix两种数据类型，数据相似，但是是不同的类型，同样的运算符可能得到不同的结果。&lt;strong&gt;mat()&lt;/strong&gt;函数可以将数组转换成矩阵类型。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from numpy import *
m = mat(random.rand(4,4))
c = m.I * m
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;矩阵的运算，numpy内部数据采用c语言数据结构，更紧凑高效。&lt;/p&gt;

&lt;h2 id=&#34;0x3-k-邻近算法:439a07facb543f750f6ac56cbaeeb58f&#34;&gt;0x3 k-邻近算法&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;精度高，对异常数据不敏感，无数据输入假定&lt;br /&gt;
&lt;strong&gt;缺点：&lt;/strong&gt;计算复杂度和空间复杂度高&lt;br /&gt;
&lt;strong&gt;适用数据范围：&lt;/strong&gt;数值型和标称型&lt;br /&gt;
&lt;strong&gt;工作原理：&lt;/strong&gt;训练样本中的数据都已经分类且知道特征和分类之间的对应关系，当未知分类数据时，算法提取样本集中选择K个最相似数据的分类标签，然后从K个标签中选择出现次数最多的哪个标签作为预测值，一般K不超过20。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>